<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Similarity Evaluation | Engineering Toolkit</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;500&display=swap" rel="stylesheet">
    <!-- KaTeX for LaTeX rendering -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" xintegrity="sha384-n8MVd4RsNIU0KOVEMVIARBEGPOJpGyr2keLAlFVppMmsAXEPi3r5VcxceWALLMcd" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js" xintegrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js" xintegrity="sha384-+VBxd3r6XgURPiLdVj5d6D0u9H0mTscrIOPCty7iplVpg9vJ5ZFpfHIciRrpviEV" crossorigin="anonymous"></script>
    <style>
        :root {
            --bg-light-primary: #ffffff;
            --bg-light-secondary: #f8fafc;
            --bg-light-tertiary: #f1f5f9;
            --border-light: #e2e8f0;
            --text-dark-primary: #1e293b;
            --text-dark-secondary: #475569;
            --text-dark-tertiary: #64748b;
            --primary: #0ea5e9;
            --primary-dark: #0284c7;
            --secondary: #8b5cf6;
            --accent: #14b8a6;
            --success: #22c55e;
            --warning: #f59e0b;
            --error: #ef4444;
            --shadow: 0 1px 3px rgba(0, 0, 0, 0.05), 0 2px 8px rgba(0, 0, 0, 0.05);
            --radius: 8px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', system-ui, sans-serif;
            background-color: var(--bg-light-secondary);
            color: var(--text-dark-secondary);
            line-height: 1.6;
            font-size: 14px;
        }

        .app-container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--border-light);
        }

        .header h1 {
            font-size: 1.6rem;
            font-weight: 600;
            color: var(--text-dark-primary);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .header h1 i {
            color: var(--primary);
        }

        .tabs {
            display: flex;
            gap: 4px;
            background: var(--bg-light-tertiary);
            padding: 4px;
            border-radius: var(--radius);
            border: 1px solid var(--border-light);
        }

        .tab {
            padding: 8px 16px;
            border-radius: var(--radius);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            background: transparent;
            border: none;
            color: var(--text-dark-secondary);
            font-size: 0.9rem;
        }

        .tab.active, .tab:hover {
            background: var(--bg-light-primary);
            color: var(--primary);
        }

        .card {
            background: var(--bg-light-primary);
            border-radius: var(--radius);
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--border-light);
            box-shadow: var(--shadow);
        }

        .card-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid var(--border-light);
        }

        .card-header h3 {
            font-size: 1.15rem;
            font-weight: 600;
            color: var(--text-dark-primary);
        }
        
        .card-header i {
             color: var(--primary);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 10px 20px;
            border-radius: var(--radius);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: 1px solid transparent;
            font-size: 0.9rem;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }

        .btn-secondary {
            background: transparent;
            color: var(--text-dark-secondary);
            border: 1px solid var(--border-light);
        }

        .btn-secondary:hover {
            background: var(--bg-light-tertiary);
            border-color: var(--text-dark-tertiary);
            color: var(--text-dark-primary);
        }

        .upload-area {
            border: 2px dashed var(--border-light);
            border-radius: var(--radius);
            padding: 24px;
            text-align: center;
            background-color: var(--bg-light-secondary);
            transition: all 0.2s ease-in-out;
            cursor: pointer;
            margin-bottom: 16px;
        }

        .upload-area:hover {
            border-color: var(--primary);
            background-color: #e0f2fe;
        }
        
        .upload-area h4 {
            color: var(--text-dark-primary);
        }

        .upload-area p {
            color: var(--text-dark-tertiary);
        }

        .file-list {
            max-height: 250px;
            overflow-y: auto;
            border: 1px solid var(--border-light);
            border-radius: var(--radius);
            padding: 8px;
            background-color: var(--bg-light-secondary);
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            border-bottom: 1px solid var(--border-light);
            font-family: 'Roboto Mono', monospace;
        }

        .file-item:last-child {
            border-bottom: none;
        }

        .table-container {
            overflow-x: auto;
            border: 1px solid var(--border-light);
            border-radius: var(--radius);
            background: var(--bg-light-primary);
        }

        .results-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
        }

        .results-table th,
        .results-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid var(--border-light);
            font-family: 'Roboto Mono', monospace;
        }

        .results-table th {
            background-color: var(--bg-light-tertiary);
            font-weight: 600;
            color: var(--text-dark-primary);
        }
        
        .results-table td {
            color: var(--text-dark-secondary);
        }

        .results-table tr:last-child td {
            border-bottom: none;
        }

        .results-table tr:hover {
            background-color: var(--bg-light-tertiary);
        }

        .chart-container {
            height: 350px;
            position: relative;
        }
        
        .grid-container {
             display: grid;
             grid-template-columns: 1fr 1fr;
             gap: 20px;
             margin-bottom: 20px;
        }
        
        .parameter-input label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-dark-secondary);
            font-size: 0.9rem;
        }

        .input-field {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-light);
            border-radius: var(--radius);
            background-color: var(--bg-light-primary);
            color: var(--text-dark-primary);
            font-size: 0.9rem;
            font-family: 'Roboto Mono', monospace;
        }
        
        .input-field:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .hidden { display: none; }
        
        .improvement-positive {
            color: var(--success);
            font-weight: 500;
        }

        .improvement-negative {
            color: var(--error);
            font-weight: 500;
        }
        
        .file-list-container { display: flex; flex-direction: column; gap: 15px; }
        .file-list-header { display: flex; justify-content: space-between; align-items: center; padding: 10px 12px; background: var(--bg-light-tertiary); border-radius: var(--radius); border: 1px solid var(--border-light); }
        .file-list-header h4 { font-size: 0.95rem; font-weight: 600; color: var(--text-dark-primary); display: flex; align-items: center; gap: 6px; }
        .file-list-actions { display: flex; gap: 8px; }
        .file-info { display: flex; align-items: center; gap: 8px; }
        .file-info i { color: var(--primary); font-size: 0.9rem; }
        .file-actions { display: flex; align-items: center; gap: 8px; }
        .file-status { font-size: 0.7rem; padding: 3px 8px; border-radius: 15px; font-weight: 500; }
        .status-pending { background-color: #fef9c3; color: #a16207; }
        .status-processing { background-color: #dbeafe; color: #1e40af; }
        .status-complete { background-color: #dcfce7; color: #15803d; }
        .status-reference { background-color: #ede9fe; color: #7c3aed; font-weight: 600; }
        .rank-1 { background-color: #f0fdf4; }
        .rank-2 { background-color: #f0f9ff; }
        .rank-3 { background-color: #f5f3ff; }
        
        .process-btn-container { text-align: center; margin: 20px 0; }
        .process-btn-container .btn-primary { padding: 12px 30px; font-size: 1rem; font-weight: 600; }
        .reference-indicator { display: inline-flex; align-items: center; gap: 4px; background: #ede9fe; color: var(--secondary); padding: 2px 6px; border-radius: 10px; font-size: 0.7rem; font-weight: 500; }
        .checkbox-container { display: flex; align-items: center; }
        .checkbox-container input { margin-right: 6px; }

        .chart-controls-container {
            padding-top: 20px;
            margin-top: 20px;
            border-top: 1px solid var(--border-light);
        }

        .control-row {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr auto;
            gap: 15px;
            align-items: center;
            padding: 8px;
            font-family: 'Roboto Mono', monospace;
            font-size: 0.85rem;
            border-bottom: 1px solid var(--border-light);
        }
        .control-row:last-child {
            border-bottom: none;
        }

        .control-row-header {
            font-weight: 600;
            color: var(--text-dark-primary);
            padding-bottom: 10px;
        }

        .control-row select, .control-row input[type="color"] {
            width: 100%;
            padding: 6px;
            border: 1px solid var(--border-light);
            border-radius: 4px;
            background-color: var(--bg-light-primary);
        }
        
        .priority-controls {
            display: flex;
            gap: 5px;
        }
        .priority-btn {
            background: var(--bg-light-tertiary);
            border: 1px solid var(--border-light);
            color: var(--text-dark-secondary);
            width: 28px;
            height: 28px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .priority-btn:hover:not(:disabled) {
            background: var(--primary);
            color: white;
        }
        .priority-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .weight-controls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .recommendation-card {
            background: linear-gradient(135deg, #f0f9ff, #f0fdf4);
            border: 1px solid var(--accent);
            text-align: center;
            padding: 20px;
        }

        .recommendation-card h4 {
            color: var(--accent);
            font-size: 1.1rem;
            margin-bottom: 10px;
        }

        .recommendation-card .file-name {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--text-dark-primary);
            margin: 10px 0;
            font-family: 'Roboto Mono', monospace;
        }
        .recommendation-card p {
            font-family: 'Roboto Mono', monospace;
            font-size: 0.9rem;
        }
        
        /* New Methodology Tab Styles */
        #documentation-tab .card-header {
            color: var(--primary);
        }
        .methodology-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            align-items: start;
        }
        .formula-card {
            background-color: var(--bg-light-tertiary);
            padding: 20px;
            border-radius: var(--radius);
            border: 1px solid var(--border-light);
            font-size: 1.1rem;
            text-align: center;
        }
        .visualization-card {
            padding: 15px;
            border: 1px solid var(--border-light);
            border-radius: var(--radius);
            height: 100%;
        }
        .method-description ul {
            padding-left: 20px;
            margin-top: 10px;
        }
         .method-description li {
            margin-bottom: 8px;
        }
        .comparison-table td .fa-check-circle { color: var(--success); }
        .comparison-table td .fa-times-circle { color: var(--error); }
        .comparison-table th, .comparison-table td {
            font-family: 'Inter', sans-serif;
            vertical-align: top;
        }

        @media (max-width: 1024px) {
           .methodology-grid { grid-template-columns: 1fr; }
        }
        @media (max-width: 768px) {
           .grid-container { grid-template-columns: 1fr; }
        }
        
    </style>
</head>
<body>
    <div class="app-container">
        <div class="header">
            <h1><i class="fas fa-wave-square"></i> Similarity Evaluation</h1>
            <div class="tabs">
                <button class="tab active" data-tab="enhanced">Evaluation Workbench</button>
                <button class="tab" data-tab="documentation">Methodology</button>
            </div>
        </div>

        <div class="tab-content" id="enhanced-tab">
            <!-- All Workbench content remains unchanged -->
            <div class="grid-container">
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-cogs"></i>
                        <h3>1. Configuration & Data Input</h3>
                    </div>
                    <div class="parameter-input">
                        <label for="timeInterval">Sampling Interval (seconds)</label>
                        <input type="number" id="timeInterval" value="0.01" step="0.001" min="0.0001" class="input-field">
                    </div>
                    <div class="upload-area" id="multiUploadContainer" style="margin-top: 15px;">
                        <i class="fas fa-cloud-upload-alt" style="font-size: 1.5rem; color: var(--primary);"></i>
                        <h4>Upload Model Output Files</h4>
                        <p>Drag & drop or click to browse for .txt/.csv files</p>
                        <input type="file" id="multiFileInput" multiple accept=".csv,.txt" style="display: none;">
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-bullseye"></i>
                        <h3>2. Seed Surface Acceleration</h3>
                    </div>
                     <div class="parameter-input">
                        <label for="totalSteps">Data Points Limit (per file)</label>
                        <input type="number" id="totalSteps" value="1000" min="10" class="input-field">
                    </div>
                    <div class="upload-area" id="seedUploadContainer" style="margin-top: 15px;">
                        <i class="fas fa-file-import" style="font-size: 1.5rem; color: var(--accent);"></i>
                        <h4>Upload Seed Surface Acceleration</h4>
                        <p>Upload the seed surface acceleration data</p>
                        <input type="file" id="seedFileInput" accept=".csv,.txt" style="display: none;">
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                     <i class="fas fa-tasks"></i>
                    <h3>3. Processing & Analysis</h3>
                </div>
                <div class="file-list-container">
                    <div class="file-list-header">
                        <h4><i class="fas fa-list"></i> Loaded Data Files</h4>
                        <div class="file-list-actions">
                             <button id="selectAllBtn" class="btn btn-secondary"><i class="fas fa-check-double"></i> Select All</button>
                             <button id="setReferenceBtn" class="btn btn-secondary"><i class="fas fa-star"></i> Set as Baseline</button>
                             <button id="compareBtn" class="btn btn-secondary"><i class="fas fa-chart-line"></i> Compare Visually</button>
                        </div>
                    </div>
                    <div class="file-list" id="fileList">
                        <div style="text-align: center; padding: 30px; color: var(--text-dark-tertiary);">
                            <p>Awaiting file uploads...</p>
                        </div>
                    </div>
                </div>
                 <div class="process-btn-container">
                    <button id="processMultiFilesBtn" class="btn btn-primary"><i class="fas fa-bolt"></i> Run Full Evaluation</button>
                </div>
            </div>

            <div class="card hidden" id="resultsSection">
                 <div class="card-header">
                    <i class="fas fa-trophy" style="color: var(--warning);"></i>
                    <h3>Evaluation Results</h3>
                </div>
                <div class="table-container">
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>File Name</th><th>NRMSE</th><th>CCC</th><th>Cross-Corr</th><th>DTW Distance</th><th>Rank</th>
                            </tr>
                        </thead>
                        <tbody id="resultsTableBody"></tbody>
                    </table>
                </div>
            </div>
            
            <div class="card hidden" id="improvementSection">
                 <div class="card-header">
                    <i class="fas fa-chart-pie" style="color: var(--accent);"></i>
                    <h3>Performance Improvement Analysis</h3>
                </div>
                <div class="table-container">
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>File Name</th><th>NRMSE % Change</th><th>CCC % Change</th><th>Cross-Corr % Change</th><th>DTW % Change</th>
                            </tr>
                        </thead>
                        <tbody id="improvementTableBody"></tbody>
                    </table>
                </div>
            </div>
            
            <div class="grid-container">
                <div class="card hidden" id="barChartSection">
                    <div class="card-header">
                        <i class="fas fa-chart-bar" style="color: var(--primary);"></i>
                        <h3>Normalized Metrics Comparison</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="evaluationBarChart"></canvas>
                    </div>
                </div>
                <div class="card hidden" id="radarChartSection">
                    <div class="card-header">
                        <i class="fas fa-sitemap" style="color: var(--secondary);"></i>
                        <h3>Comprehensive Evaluation Profile</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="evaluationRadarChart"></canvas>
                    </div>
                </div>
            </div>


            <div class="card hidden" id="comparisonChartSection">
                <div class="card-header">
                    <i class="fas fa-ruler-combined"></i>
                    <h3>Comparative Visualization & Layer Control</h3>
                </div>
                 <div class="chart-container">
                    <canvas id="comparisonChart"></canvas>
                </div>
                <div class="chart-controls-container hidden" id="chartLayerControls">
                    <!-- JS will populate this -->
                </div>
            </div>
            
            <div class="card hidden" id="recommendationConfigSection">
                 <div class="card-header">
                    <i class="fas fa-sliders-h"></i>
                    <h3>Recommendation Engine</h3>
                </div>
                <p style="margin-bottom: 15px;">Adjust the sliders to set the importance of each metric. The system will recommend the best model based on your current preference weights.</p>
                <div class="weight-controls-grid">
                    <div class="parameter-input">
                        <label for="nrmseWeight">NRMSE Importance (Error Minimization)</label>
                        <input type="range" id="nrmseWeight" min="0" max="10" value="5" step="1">
                    </div>
                     <div class="parameter-input">
                        <label for="cccWeight">CCC Importance (Agreement)</label>
                        <input type="range" id="cccWeight" min="0" max="10" value="5" step="1">
                    </div>
                     <div class="parameter-input">
                        <label for="crossCorrelationWeight">Cross-Corr Importance (Phase Sync)</label>
                        <input type="range" id="crossCorrelationWeight" min="0" max="10" value="5" step="1">
                    </div>
                     <div class="parameter-input">
                        <label for="dtwWeight">DTW Importance (Shape Similarity)</label>
                        <input type="range" id="dtwWeight" min="0" max="10" value="5" step="1">
                    </div>
                </div>
                <button id="updateRecommendationBtn" class="btn btn-secondary"><i class="fas fa-calculator"></i> Find Best Match</button>
            </div>
            
             <div class="card hidden recommendation-card" id="recommendationResultSection">
                <h4><i class="fas fa-award"></i> Recommended Model</h4>
                <div id="recommendationContent">
                    <!-- JS will populate this -->
                </div>
            </div>
        </div>

        <div class="tab-content hidden" id="documentation-tab">
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-balance-scale"></i>
                    <h3>Comparative Analysis of Evaluation Methods</h3>
                </div>
                <div class="table-container">
                    <table class="results-table comparison-table">
                        <thead>
                            <tr>
                                <th>Method</th>
                                <th>Primary Goal</th>
                                <th>Pros for Seismic Data</th>
                                <th>Cons for Seismic Data</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>NRMSE</strong></td>
                                <td>Measures average error magnitude relative to the signal's range.</td>
                                <td><ul><li><i class="fas fa-check-circle"></i> Simple, intuitive measure of overall accuracy.</li><li><i class="fas fa-check-circle"></i> Good for quantifying amplitude differences.</li></ul></td>
                                <td><ul><li><i class="fas fa-times-circle"></i> Highly sensitive to phase shifts; a perfectly shaped but shifted signal gets a high error.</li><li><i class="fas fa-times-circle"></i> Can be skewed by single large outlier peaks.</li></ul></td>
                            </tr>
                            <tr>
                                <td><strong>CCC</strong></td>
                                <td>Measures agreement, assessing both correlation and identity.</td>
                                <td><ul><li><i class="fas fa-check-circle"></i> Captures both trend similarity (correlation) and value similarity (identity).</li><li><i class="fas fa-check-circle"></i> More robust than standard correlation for model evaluation.</li></ul></td>
                                <td><ul><li><i class="fas fa-times-circle"></i> Like NRMSE, it is sensitive to phase mismatches between signals.</li><li><i class="fas fa-times-circle"></i> Less focused on shape and more on point-to-point agreement.</li></ul></td>
                            </tr>
                            <tr>
                                <td><strong>Cross-Correlation</strong></td>
                                <td>Measures the linear similarity of two signals at zero time lag.</td>
                                <td><ul><li><i class="fas fa-check-circle"></i> Directly evaluates in-phase similarity, critical for checking if seismic event peaks align.</li><li><i class="fas fa-check-circle"></i> Effective at detecting phase lead or lag if calculated over a range of lags.</li></ul></td>
                                <td><ul><li><i class="fas fa-times-circle"></i> At zero lag, it fails to capture similarity if signals are out of phase.</li><li><i class="fas fa-times-circle"></i> Does not account for non-linear distortions in wave shape.</li></ul></td>
                            </tr>
                            <tr>
                                <td><strong>DTW</strong></td>
                                <td>Measures shape similarity by non-linearly aligning sequences.</td>
                                <td><ul><li><i class="fas fa-check-circle"></i> Excellent for comparing signal shapes, robust to time shifts and duration differences.</li><li><i class="fas fa-check-circle"></i> Captures similarity even when seismic waves arrive at slightly different times.</li></ul></td>
                                <td><ul><li><i class="fas fa-times-circle"></i> Computationally more intensive than other methods.</li><li><i class="fas fa-times-circle"></i> Can sometimes produce "pathological" alignments, matching unrelated features.</li></ul></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- NRMSE Section -->
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-calculator"></i>
                    <h3>Normalized Root Mean Square Error (NRMSE)</h3>
                </div>
                <div class="methodology-grid">
                    <div class="method-description">
                        <p>NRMSE quantifies the average magnitude of the error between the predicted and reference signals, normalized by the range of the reference signal. A lower value indicates a better fit.</p>
                        <ul>
                            <li><strong>Measures:</strong> Overall point-to-point error.</li>
                            <li><strong>Interpretation:</strong> Lower is better. 0 is a perfect match.</li>
                        </ul>
                        <div class="formula-card">
                           $$ NRMSE = \frac{\sqrt{\frac{\sum_{i=1}^{n}(y_i - \hat{y}_i)^2}{n}}}{\max(y) - \min(y)} $$
                        </div>
                    </div>
                    <div class="visualization-card">
                         <canvas id="nrmse-viz"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- CCC Section -->
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-project-diagram"></i>
                    <h3>Concordance Correlation Coefficient (CCC)</h3>
                </div>
                 <div class="methodology-grid">
                    <div class="method-description">
                        <p>CCC evaluates the agreement between two series by measuring how far the observed data deviates from the line of perfect concordance (a 45-degree line). It accounts for both correlation and bias.</p>
                        <ul>
                            <li><strong>Measures:</strong> Degree of agreement and identity.</li>
                            <li><strong>Interpretation:</strong> Higher is better. +1 is perfect agreement.</li>
                        </ul>
                        <div class="formula-card">
                           $$ \rho_c = \frac{2 \rho \sigma_x \sigma_y}{\sigma_x^2 + \sigma_y^2 + (\mu_x - \mu_y)^2} $$
                        </div>
                    </div>
                    <div class="visualization-card">
                        <canvas id="ccc-viz"></canvas>
                    </div>
                </div>
            </div>

            <!-- Cross-Correlation Section -->
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-wave-square"></i>
                    <h3>Cross-Correlation</h3>
                </div>
                <div class="methodology-grid">
                    <div class="method-description">
                        <p>Cross-correlation measures the similarity between two signals as a function of the displacement of one relative to the other. Here, we use it at zero lag to assess how well the signals are synchronized in time.</p>
                         <ul>
                            <li><strong>Measures:</strong> In-phase linear similarity.</li>
                            <li><strong>Interpretation:</strong> Higher is better. +1 is perfect positive correlation.</li>
                        </ul>
                        <div class="formula-card">
                            $$ r = \frac{\sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum (x_i - \bar{x})^2 \sum (y_i - \bar{y})^2}} $$
                        </div>
                    </div>
                     <div class="visualization-card">
                        <svg width="100%" height="250" viewBox="0 0 400 250">
                            <text x="200" y="20" text-anchor="middle" font-weight="bold">High Correlation (In-Phase)</text>
                            <path d="M 10 70 Q 60 20, 110 70 T 210 70 T 310 70 T 410 70" stroke="#0ea5e9" stroke-width="2" fill="none"/>
                            <path d="M 10 70 Q 60 20, 110 70 T 210 70 T 310 70 T 410 70" stroke="#14b8a6" stroke-width="2" fill="none" stroke-dasharray="4 4"/>
                             <text x="200" y="140" text-anchor="middle" font-weight="bold">Low Correlation (Out-of-Phase)</text>
                            <path d="M 10 190 Q 60 140, 110 190 T 210 190 T 310 190 T 410 190" stroke="#0ea5e9" stroke-width="2" fill="none"/>
                            <path d="M 10 190 Q 60 240, 110 190 T 210 190 T 310 190 T 410 190" stroke="#ef4444" stroke-width="2" fill="none" stroke-dasharray="4 4"/>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- DTW Section -->
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-route"></i>
                    <h3>Dynamic Time Warping (DTW)</h3>
                </div>
                <div class="methodology-grid">
                    <div class="method-description">
                        <p>DTW finds the optimal non-linear alignment between two time series. It is effective for comparing series that may be similar in shape but are locally out of phase or stretched in time.</p>
                        <ul>
                            <li><strong>Measures:</strong> Shape similarity, allowing for time shifts.</li>
                            <li><strong>Interpretation:</strong> Lower is better. 0 indicates identical shapes.</li>
                        </ul>
                        <div class="formula-card">
                           $$ DTW(X, Y) = \min_{P} \sqrt{\sum_{(i,j) \in P} d(x_i, y_j)^2} $$
                        </div>
                    </div>
                    <div class="visualization-card">
                        <svg width="100%" height="250" viewBox="0 0 400 250">
                             <text x="200" y="20" text-anchor="middle" font-weight="bold">DTW Alignment Path</text>
                             <!-- Paths -->
                             <path id="dtw-path1" d="M 50 150 C 100 50, 150 180, 250 150 S 350 50, 350 120" stroke="#0ea5e9" stroke-width="2" fill="none"/>
                             <path id="dtw-path2" d="M 50 200 C 80 100, 180 230, 280 200 S 350 100, 380 170" stroke="#ef4444" stroke-width="2" fill="none" stroke-dasharray="4 4"/>
                             <!-- Lines -->
                             <line x1="50" y1="150" x2="50" y2="200" stroke="#cccccc" stroke-width="1"/>
                             <line x1="105" y1="83" x2="85" y2="105" stroke="#cccccc" stroke-width="1"/>
                             <line x1="150" y1="180" x2="180" y2="230" stroke="#cccccc" stroke-width="1"/>
                             <line x1="250" y1="150" x2="280" y2="200" stroke="#cccccc" stroke-width="1"/>
                             <line x1="350" y1="120" x2="380" y2="170" stroke="#cccccc" stroke-width="1"/>
                        </svg>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let uploadedFiles = [];
        let selectedFiles = new Set();
        let seedData = null;
        let comparisonChart = null;
        let evaluationRadarChart = null;
        let evaluationBarChart = null;
        let timeInterval = 0.01;
        let totalSteps = 1000;
        let currentResults = [];
        let methodologyVisualsInitialized = false;

        document.addEventListener('DOMContentLoaded', () => {
            setupEventListeners();
            setupTabSwitching();
            Chart.defaults.color = '#475569';

            // Initial render for KaTeX formulas
            if (window.renderMathInElement) {
                renderMathInElement(document.body, {
                    delimiters: [
                        {left: '$$', right: '$$', display: true},
                        {left: '$', right: '$', display: false},
                        {left: '\\(', right: '\\)', display: false},
                        {left: '\\[', right: '\\]', display: true}
                    ]
                });
            }
        });

        function setupTabSwitching() {
            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.add('hidden'));
                    tab.classList.add('active');
                    const activeTab = document.getElementById(`${tab.dataset.tab}-tab`);
                    activeTab.classList.remove('hidden');

                    if (tab.dataset.tab === 'documentation' && !methodologyVisualsInitialized) {
                        initializeMethodologyVisuals();
                        methodologyVisualsInitialized = true;
                    }
                });
            });
        }

        function setupEventListeners() {
            const multiUploadContainer = document.getElementById('multiUploadContainer');
            const multiFileInput = document.getElementById('multiFileInput');
            const seedUploadContainer = document.getElementById('seedUploadContainer');
            const seedFileInput = document.getElementById('seedFileInput');
            
            multiUploadContainer.addEventListener('click', () => multiFileInput.click());
            multiFileInput.addEventListener('change', (e) => handleFileUpload(e.target.files, 'multi'));
            
            seedUploadContainer.addEventListener('click', () => seedFileInput.click());
            seedFileInput.addEventListener('change', (e) => handleFileUpload(e.target.files, 'seed'));
            
            ['dragover', 'dragleave', 'drop'].forEach(eventName => {
                [multiUploadContainer, seedUploadContainer].forEach(container => {
                    container.addEventListener(eventName, e => {
                        e.preventDefault();
                        e.stopPropagation();
                        if (eventName === 'dragover') container.style.borderColor = 'var(--primary)';
                        else container.style.borderColor = 'var(--border-light)';
                        if (eventName === 'drop') {
                           const type = container.id === 'multiUploadContainer' ? 'multi' : 'seed';
                           handleFileUpload(e.dataTransfer.files, type);
                        }
                    });
                });
            });

            document.getElementById('processMultiFilesBtn').addEventListener('click', processFiles);
            document.getElementById('selectAllBtn').addEventListener('click', toggleSelectAll);
            document.getElementById('setReferenceBtn').addEventListener('click', setReferenceFile);
            document.getElementById('compareBtn').addEventListener('click', compareSelectedFiles);
            document.getElementById('updateRecommendationBtn').addEventListener('click', () => calculateAndDisplayRecommendation(currentResults));
        }

        function initializeMethodologyVisuals() {
            // NRMSE Visualization
            const nrmseCtx = document.getElementById('nrmse-viz').getContext('2d');
            const labels = Array.from({length: 50}, (_, i) => i);
            const refData = labels.map(x => Math.sin(x*0.5) * 10);
            const predData = labels.map(x => (Math.sin(x*0.5 + 0.1) * 9.5) + Math.cos(x*2)*0.5);
            new Chart(nrmseCtx, {
                type: 'line',
                data: {
                    labels,
                    datasets: [
                        { label: 'Reference', data: refData, borderColor: 'var(--accent)', borderWidth: 2, pointRadius: 0, tension: 0.1 },
                        { label: 'Predicted (with error)', data: predData, borderColor: 'var(--error)', borderWidth: 2, pointRadius: 0, tension: 0.1, borderDash: [5,5] }
                    ]
                },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } }, scales: { x: { display: false }, y: { display: false } } }
            });

            // CCC Visualization
            const cccCtx = document.getElementById('ccc-viz').getContext('2d');
            const cccData = Array.from({length: 50}, () => {
                const x = Math.random() * 20 - 10;
                return { x: x, y: x * (0.8 + Math.random()*0.4) + (Math.random()*2 - 1) };
            });
            new Chart(cccCtx, {
                type: 'scatter',
                data: {
                    datasets: [
                        { label: 'Predicted vs. Reference', data: cccData, backgroundColor: 'rgba(14, 165, 233, 0.6)' },
                        { type: 'line', label: 'Perfect Concordance (y=x)', data: [{x:-12,y:-12}, {x:12,y:12}], borderColor: 'var(--success)', borderWidth: 2, pointRadius: 0, fill: false }
                    ]
                },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } }, scales: { x: { min: -12, max: 12 }, y: { min: -12, max: 12 } } }
            });

            // Math was already rendered on DOMContentLoaded, no need to re-render.
        }

        // --- All existing JavaScript functions from previous version go here ---
        // handleFileUpload, parseData, renderFileList, toggleFileSelection, etc.
        // ...
        function handleFileUpload(files, type) {
            if (type === 'seed' && files.length > 0) {
                const file = files[0];
                const reader = new FileReader();
                reader.onload = e => {
                    const parsedData = parseData(e.target.result, file.name);
                    if (parsedData.isValid) {
                        seedData = parsedData.data;
                        alert(`Seed surface acceleration data "${file.name}" loaded successfully with ${seedData.length} data points.`);
                    } else {
                        alert(`Error parsing seed file: ${parsedData.errorMessage}`);
                    }
                };
                reader.readAsText(file);
            } else if (type === 'multi') {
                Array.from(files).forEach(file => {
                     if (!uploadedFiles.some(f => f.name === file.name)) {
                        uploadedFiles.push({ file, name: file.name, data: null, isReference: false });
                     }
                });
                renderFileList();
            }
        }

        function parseData(content, fileName) {
            try {
                const lines = content.split('\n').filter(line => line.trim() !== '');
                if (lines.length === 0) return { isValid: false, errorMessage: 'Empty file' };
                
                let data = [];
                const isCsv = fileName.toLowerCase().endsWith('.csv');
                let startIndex = 0;
                if (isCsv && (lines[0].toLowerCase().includes('time') || lines[0].toLowerCase().includes('accel'))) {
                    startIndex = 1;
                }
                
                for (let i = startIndex; i < lines.length; i++) {
                    const parts = lines[i].trim().split(/[\s,]+/);
                    const value = parseFloat(parts[parts.length - 1]);
                    if (!isNaN(value)) data.push(value);
                }

                if (data.length === 0) return { isValid: false, errorMessage: 'No valid numeric data found.' };
                
                totalSteps = parseInt(document.getElementById('totalSteps').value, 10);
                return { isValid: true, data: data.slice(0, totalSteps) };

            } catch (error) {
                return { isValid: false, errorMessage: error.message };
            }
        }

        function renderFileList() {
            const fileListDiv = document.getElementById('fileList');
            if (!fileListDiv) return;
            fileListDiv.innerHTML = '';
            uploadedFiles.forEach((fileObj, index) => {
                const item = document.createElement('div');
                item.className = 'file-item';
                item.innerHTML = `
                    <div class="file-info">
                        <input type="checkbox" data-index="${index}" onchange="toggleFileSelection(${index})" ${selectedFiles.has(index) ? 'checked' : ''}>
                        <i class="fas fa-file-alt"></i>
                        <span>${fileObj.name}</span>
                        ${fileObj.isReference ? '<span class="reference-indicator"><i class="fas fa-star"></i> Baseline</span>' : ''}
                    </div>
                    <div class="file-status ${fileObj.data ? 'status-complete' : 'status-pending'}">${fileObj.data ? 'Loaded' : 'Pending'}</div>
                `;
                fileListDiv.appendChild(item);
            });
        }
        
        function toggleFileSelection(index) {
            if (selectedFiles.has(index)) {
                selectedFiles.delete(index);
            } else {
                selectedFiles.add(index);
            }
        }
        
        function toggleSelectAll() {
            const allSelected = selectedFiles.size === uploadedFiles.length;
            if (allSelected) {
                selectedFiles.clear();
            } else {
                uploadedFiles.forEach((_, index) => selectedFiles.add(index));
            }
            renderFileList();
        }

        function setReferenceFile() {
             if (selectedFiles.size !== 1) {
                alert("Please select exactly one file to set as the baseline for comparison.");
                return;
            }
            const refIndex = selectedFiles.values().next().value;
            uploadedFiles.forEach((file, index) => file.isReference = (index === refIndex));
            renderFileList();
        }

        async function processFiles() {
            if (!seedData) {
                alert('Please upload seed surface acceleration data first.');
                return;
            }
            if (uploadedFiles.length === 0) {
                 alert('Please upload model output files to evaluate.');
                 return;
            }
            
            for (const fileObj of uploadedFiles) {
                if (!fileObj.data) {
                    const content = await fileObj.file.text();
                    const parsedData = parseData(content, fileObj.name);
                    if (parsedData.isValid) {
                        fileObj.data = parsedData.data;
                    } else {
                        alert(`Failed to process ${fileObj.name}: ${parsedData.errorMessage}`);
                        return;
                    }
                }
            }
            renderFileList();

            currentResults = calculateMetrics();
            displayResults(currentResults);
            displayImprovementTable(currentResults);
            renderEvaluationRadarChart(currentResults);
            renderEvaluationBarChart(currentResults);
            setupRecommendationEngine(currentResults);
        }
        
        function calculateMetrics() {
            const results = uploadedFiles.map(fileObj => {
                if (!fileObj.data) return null;
                const len = Math.min(seedData.length, fileObj.data.length);
                const ref = seedData.slice(0, len);
                const pred = fileObj.data.slice(0, len);

                return {
                    fileName: fileObj.name,
                    isReference: fileObj.isReference,
                    nrmse: calculateNRMSE(ref, pred),
                    ccc: calculateCCC(ref, pred),
                    crossCorrelation: calculateCrossCorrelation(ref, pred),
                    dtw: calculateDTW(ref, pred)
                };
            }).filter(Boolean);
            
            results.sort((a, b) => b.ccc - a.ccc); // Simple sort by CCC for ranking
            results.forEach((res, i) => res.rank = i + 1);
            return results;
        }

        function displayResults(results) {
            const tableBody = document.getElementById('resultsTableBody');
            tableBody.innerHTML = '';
            results.forEach(res => {
                const row = tableBody.insertRow();
                row.className = getRankClass(res.rank);
                const fileNameDisplay = res.isReference ? `${res.fileName} <span class="reference-indicator"><i class="fas fa-star"></i> Baseline</span>` : res.fileName;
                row.innerHTML = `<td>${fileNameDisplay}</td><td>${res.nrmse.toFixed(4)}</td><td>${res.ccc.toFixed(4)}</td><td>${res.crossCorrelation.toFixed(4)}</td><td>${res.dtw.toFixed(2)}</td><td>#${res.rank}</td>`;
            });
            document.getElementById('resultsSection').classList.remove('hidden');
        }
        
        function displayImprovementTable(results) {
            const baseline = results.find(r => r.isReference);
            if (!baseline) {
                 document.getElementById('improvementSection').classList.add('hidden');
                 return;
            }
            
            const tableBody = document.getElementById('improvementTableBody');
            tableBody.innerHTML = '';
            results.filter(r => !r.isReference).forEach(res => {
                const nrmseImp = ((baseline.nrmse - res.nrmse) / baseline.nrmse) * 100;
                const cccImp = ((res.ccc - baseline.ccc) / baseline.ccc) * 100;
                const crossCorrImp = ((res.crossCorrelation - baseline.crossCorrelation) / baseline.crossCorrelation) * 100;
                const dtwImp = ((baseline.dtw - res.dtw) / baseline.dtw) * 100;

                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${res.fileName}</td>
                    <td class="${nrmseImp > 0 ? 'improvement-positive' : 'improvement-negative'}">${nrmseImp.toFixed(2)}%</td>
                    <td class="${cccImp > 0 ? 'improvement-positive' : 'improvement-negative'}">${cccImp.toFixed(2)}%</td>
                    <td class="${crossCorrImp > 0 ? 'improvement-positive' : 'improvement-negative'}">${crossCorrImp.toFixed(2)}%</td>
                    <td class="${dtwImp > 0 ? 'improvement-positive' : 'improvement-negative'}">${dtwImp.toFixed(2)}%</td>
                `;
            });
             document.getElementById('improvementSection').classList.remove('hidden');
        }
        
        function compareSelectedFiles() {
            if (selectedFiles.size === 0) {
                 alert('Please select at least one file to visualize.');
                 return;
            }
             if (!seedData) {
                alert('Please upload seed surface acceleration data first.');
                return;
            }
            const fileData = Array.from(selectedFiles)
                .map(index => uploadedFiles[index])
                .filter(file => file && file.data);
            
            if (fileData.length === 0) return;
            renderComparisonChart(fileData);
        }
        
        function renderComparisonChart(fileData) {
            if (comparisonChart) comparisonChart.destroy();
            
            timeInterval = parseFloat(document.getElementById('timeInterval').value);
            const datasets = [{
                label: 'Seed Surface Acceleration', data: seedData, borderColor: '#14b8a6', borderWidth: 2.5, fill: false, tension: 0.1, pointRadius: 0
            }];
            
            const colors = ['#0ea5e9', '#ef4444', '#f59e0b', '#8b5cf6', '#64748b'];
            fileData.forEach((file, index) => {
                datasets.push({
                    label: file.name, data: file.data, borderColor: colors[index % colors.length], borderWidth: 1.5, borderDash: [], fill: false, tension: 0.1, pointRadius: 0
                });
            });
            
            const maxLen = Math.max(seedData.length, ...fileData.map(f => f.data ? f.data.length : 0));
            
            comparisonChart = new Chart('comparisonChart', {
                type: 'line',
                data: {
                    labels: Array.from({length: maxLen}, (_, i) => (i * timeInterval).toFixed(3)),
                    datasets
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    plugins: { legend: { position: 'top', labels: { color: '#475569' } } },
                    scales: {
                        y: { title: { display: true, text: 'Acceleration (g)', color: '#475569' }, ticks: { color: '#475569' }, grid: { color: 'rgba(0,0,0,0.05)' } },
                        x: { title: { display: true, text: 'Time (s)', color: '#475569' }, ticks: { color: '#475569' }, grid: { color: 'rgba(0,0,0,0.05)' } }
                    },
                }
            });
            
            renderChartLayerControls();
            document.getElementById('comparisonChartSection').classList.remove('hidden');
        }
        
        function renderChartLayerControls() {
            const controlsContainer = document.getElementById('chartLayerControls');
            const datasetsToControl = comparisonChart.data.datasets;

            controlsContainer.innerHTML = `
                <div class="control-row control-row-header">
                    <span>Data Series</span>
                    <span>Color</span>
                    <span>Line Type</span>
                    <span>Draw Priority</span>
                </div>
            `;
            
            datasetsToControl.forEach((dataset, index) => {
                const controlRow = document.createElement('div');
                controlRow.className = 'control-row';
                controlRow.innerHTML = `
                    <span>${dataset.label}</span>
                    <span><input type="color" value="${dataset.borderColor}" data-index="${index}"></span>
                    <span><select data-index="${index}">
                        <option value="solid" ${!dataset.borderDash || dataset.borderDash.length === 0 ? 'selected' : ''}>Solid</option>
                        <option value="dotted" ${dataset.borderDash && dataset.borderDash.length > 0 ? 'selected' : ''}>Dotted</option>
                    </select></span>
                    <span class="priority-controls">
                        <button class="priority-btn" onclick="adjustLayerPriority(${index}, 'up')" ${index === 0 ? 'disabled' : ''}><i class="fas fa-arrow-up"></i></button>
                        <button class="priority-btn" onclick="adjustLayerPriority(${index}, 'down')" ${index === datasetsToControl.length - 1 ? 'disabled' : ''}><i class="fas fa-arrow-down"></i></button>
                    </span>
                `;
                controlsContainer.appendChild(controlRow);
            });

            controlsContainer.querySelectorAll('input[type="color"], select').forEach(element => {
                element.addEventListener('change', updateChartStyles);
            });

            controlsContainer.classList.remove('hidden');
        }

        function adjustLayerPriority(index, direction) {
            const datasets = comparisonChart.data.datasets;
            const newIndex = direction === 'up' ? index - 1 : index + 1;

            if (newIndex < 0 || newIndex >= datasets.length) return;
            
            [datasets[index], datasets[newIndex]] = [datasets[newIndex], datasets[index]];

            renderChartLayerControls();
            comparisonChart.update();
        }

        function updateChartStyles() {
            if (!comparisonChart) return;

            const controls = document.querySelectorAll('#chartLayerControls .control-row:not(.control-row-header)');
            controls.forEach(row => {
                const colorInput = row.querySelector('input[type="color"]');
                const lineTypeSelect = row.querySelector('select');
                
                const index = parseInt(colorInput.dataset.index);
                const dataset = comparisonChart.data.datasets.find((d, i) => i === index);


                if (dataset) {
                    dataset.borderColor = colorInput.value;
                    dataset.borderDash = lineTypeSelect.value === 'dotted' ? [5, 5] : [];
                }
            });
            
            comparisonChart.update();
        }

        function setupRecommendationEngine(results) {
            const recommendationConfigSection = document.getElementById('recommendationConfigSection');
            if (results && results.length > 0) {
                recommendationConfigSection.classList.remove('hidden');
                calculateAndDisplayRecommendation(results); 
            } else {
                recommendationConfigSection.classList.add('hidden');
                document.getElementById('recommendationResultSection').classList.add('hidden');
            }
        }

        function calculateAndDisplayRecommendation(results) {
            if (!results || results.length === 0) return;

            const weights = {
                nrmse: parseFloat(document.getElementById('nrmseWeight').value) / 10,
                ccc: parseFloat(document.getElementById('cccWeight').value) / 10,
                crossCorrelation: parseFloat(document.getElementById('crossCorrelationWeight').value) / 10,
                dtw: parseFloat(document.getElementById('dtwWeight').value) / 10,
            };

            const metrics = {
                nrmse: results.map(r => r.nrmse),
                ccc: results.map(r => r.ccc),
                crossCorrelation: results.map(r => r.crossCorrelation),
                dtw: results.map(r => r.dtw),
            };

            const minMax = {};
            for (const key in metrics) {
                minMax[key] = { min: Math.min(...metrics[key]), max: Math.max(...metrics[key]) };
            }

            let bestFile = null;
            let maxScore = -Infinity;

            results.forEach(res => {
                const rangeNrmse = minMax.nrmse.max - minMax.nrmse.min;
                const normNrmse = rangeNrmse > 1e-9 ? (minMax.nrmse.max - res.nrmse) / rangeNrmse : 1;

                const rangeCcc = minMax.ccc.max - minMax.ccc.min;
                const normCcc = rangeCcc > 1e-9 ? (res.ccc - minMax.ccc.min) / rangeCcc : 1;

                const rangeCrossCorr = minMax.crossCorrelation.max - minMax.crossCorrelation.min;
                const normCrossCorr = rangeCrossCorr > 1e-9 ? (res.crossCorrelation - minMax.crossCorrelation.min) / rangeCrossCorr : 1;

                const rangeDtw = minMax.dtw.max - minMax.dtw.min;
                const normDtw = rangeDtw > 1e-9 ? (minMax.dtw.max - res.dtw) / rangeDtw : 1;

                const totalScore = (normNrmse * weights.nrmse) + (normCcc * weights.ccc) + (normCrossCorr * weights.crossCorrelation) + (normDtw * weights.dtw);

                if (totalScore > maxScore) {
                    maxScore = totalScore;
                    bestFile = res;
                }
            });

            const resultSection = document.getElementById('recommendationResultSection');
            const contentDiv = document.getElementById('recommendationContent');
            if (bestFile) {
                contentDiv.innerHTML = `
                    <div class="file-name">${bestFile.fileName}</div>
                    <p>This model provides the best overall match based on your current preference weights.</p>
                `;
                resultSection.classList.remove('hidden');
            } else {
                resultSection.classList.add('hidden');
            }
        }

        function renderEvaluationRadarChart(results) {
            if (evaluationRadarChart) evaluationRadarChart.destroy();
            const radarChartSection = document.getElementById('radarChartSection');
            if (results.length === 0) return radarChartSection.classList.add('hidden');

            const dtwValues = results.map(r => r.dtw).filter(v => isFinite(v));
            if (dtwValues.length === 0) return;
            const maxDtw = Math.max(...dtwValues);
            const datasets = results.map((res, index) => {
                const colors = ['#0ea5e9', '#ef4444', '#f59e0b', '#8b5cf6', '#22c55e', '#64748b'];
                const color = colors[index % colors.length];
                return {
                    label: res.fileName,
                    data: [1 - Math.max(0, Math.min(1, res.nrmse)), (res.ccc + 1) / 2, (res.crossCorrelation + 1) / 2, maxDtw > 1e-9 ? (1 - (res.dtw / maxDtw)) : 1],
                    borderColor: color, backgroundColor: `${color}33`, borderWidth: 2, pointBackgroundColor: color, pointRadius: 4, pointHoverRadius: 6,
                };
            });

            const ctx = document.getElementById('evaluationRadarChart').getContext('2d');
            evaluationRadarChart = new Chart(ctx, {
                type: 'radar',
                data: { labels: ['NRMSE (Inv)', 'CCC', 'Cross-Corr', 'DTW (Inv)'], datasets },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    plugins: {
                        legend: { position: 'top', labels: { color: '#475569', font: { family: "'Inter', sans-serif" } } },
                        tooltip: { callbacks: { label: (c) => `${c.dataset.label}: ${results[c.datasetIndex][['nrmse','ccc','crossCorrelation','dtw'][c.dataIndex]].toFixed(4)} (Original)` } }
                    },
                    scales: { r: { angleLines: { color: '#e2e8f0' }, grid: { color: '#e2e8f0' }, pointLabels: { color: '#1e293b', font: { size: 12 } }, ticks: { backdropColor: 'transparent', color: '#64748b', stepSize: 0.25 }, min: 0, max: 1 } },
                    elements: { line: { tension: 0.1 } }
                }
            });
            radarChartSection.classList.remove('hidden');
        }

        function renderEvaluationBarChart(results) {
            if (evaluationBarChart) evaluationBarChart.destroy();
            const barChartSection = document.getElementById('barChartSection');
            if (results.length === 0) return barChartSection.classList.add('hidden');

            const dtwValues = results.map(r => r.dtw).filter(v => isFinite(v));
            if (dtwValues.length === 0) return;
            const maxDtw = Math.max(...dtwValues);
            
            const labels = results.map(r => r.fileName);
            const datasets = [
                { label: 'NRMSE (Inv)', data: results.map(r => 1 - Math.max(0, Math.min(1, r.nrmse))), backgroundColor: '#38bdf8' },
                { label: 'CCC', data: results.map(r => (r.ccc + 1) / 2), backgroundColor: '#a78bfa' },
                { label: 'Cross-Corr', data: results.map(r => (r.crossCorrelation + 1) / 2), backgroundColor: '#4ade80' },
                { label: 'DTW (Inv)', data: results.map(r => maxDtw > 1e-9 ? 1 - (r.dtw / maxDtw) : 1), backgroundColor: '#facc15' }
            ];

            const ctx = document.getElementById('evaluationBarChart').getContext('2d');
            evaluationBarChart = new Chart(ctx, {
                type: 'bar',
                data: { labels, datasets },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    plugins: {
                        legend: { position: 'top', labels: { color: '#475569' } },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const res = results[context.dataIndex];
                                    let originalValue;
                                    switch(context.dataset.label) {
                                        case 'NRMSE (Inv)': originalValue = res.nrmse.toFixed(4); break;
                                        case 'CCC': originalValue = res.ccc.toFixed(4); break;
                                        case 'Cross-Corr': originalValue = res.crossCorrelation.toFixed(4); break;
                                        case 'DTW (Inv)': originalValue = res.dtw.toFixed(2); break;
                                    }
                                    return `${context.dataset.label.replace(' (Inv)','')} (Original): ${originalValue}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: { title: { display: true, text: 'Normalized Score (Higher is Better)', color: '#475569' }, ticks: { color: '#475569' }, grid: { color: 'rgba(0,0,0,0.05)' }, beginAtZero: true, max: 1 },
                        x: { ticks: { color: '#475569' }, grid: { display: false } }
                    }
                }
            });
            barChartSection.classList.remove('hidden');
        }

        // METRIC CALCULATIONS
        function calculateNRMSE(actual, predicted) {
            const rmse = Math.sqrt(actual.reduce((sum, val, i) => sum + (val - predicted[i]) ** 2, 0) / actual.length);
            const range = Math.max(...actual) - Math.min(...actual);
            return range > 1e-9 ? rmse / range : 0;
        }

        function calculateCCC(actual, predicted) {
            const n = actual.length;
            const meanActual = actual.reduce((s, v) => s + v, 0) / n;
            const meanPredicted = predicted.reduce((s, v) => s + v, 0) / n;
            const covar = actual.reduce((sum, val, i) => sum + (val - meanActual) * (predicted[i] - meanPredicted), 0) / n;
            const varActual = actual.reduce((sum, val) => sum + (val - meanActual) ** 2, 0) / n;
            const varPredicted = predicted.reduce((sum, val) => sum + (val - meanPredicted) ** 2, 0) / n;
            const denominator = varActual + varPredicted + (meanActual - meanPredicted) ** 2;
            return denominator > 1e-9 ? (2 * covar) / denominator : 0;
        }

        function calculateCrossCorrelation(actual, predicted) {
            const n = actual.length;
            const meanActual = actual.reduce((s, v) => s + v, 0) / n;
            const meanPredicted = predicted.reduce((s, v) => s + v, 0) / n;
            const numerator = actual.reduce((sum, val, i) => sum + (val - meanActual) * (predicted[i] - meanPredicted), 0);
            const denActual = Math.sqrt(actual.reduce((sum, val) => sum + (val - meanActual) ** 2, 0));
            const denPredicted = Math.sqrt(predicted.reduce((sum, val) => sum + (val - meanPredicted) ** 2, 0));
            return (denActual * denPredicted) > 1e-9 ? numerator / (denActual * denPredicted) : 0;
        }

        function calculateDTW(ts1, ts2) {
            const n = ts1.length, m = ts2.length;
            const dtw = Array(n + 1).fill(null).map(() => Array(m + 1).fill(Infinity));
            dtw[0][0] = 0;
            for (let i = 1; i <= n; i++) {
                for (let j = 1; j <= m; j++) {
                    const cost = Math.abs(ts1[i - 1] - ts2[j - 1]);
                    dtw[i][j] = cost + Math.min(dtw[i - 1][j], dtw[i][j - 1], dtw[i - 1][j - 1]);
                }
            }
            return dtw[n][m];
        }
        
        function getRankClass(rank) { return { 1: 'rank-1', 2: 'rank-2', 3: 'rank-3' }[rank] || ''; }

    </script>
</body>
</html>

